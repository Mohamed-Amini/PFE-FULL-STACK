# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
        mercure_publisher_url: 'https://example.com/.well-known/mercure'
        domain.jitsi.url: 'meet.jit.si' 

services:
    # Define LiipImagineBundle cache resolver service
    liip_imagine.cache.resolver:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver
        arguments:
            - '%kernel.root_dir%/../public'

    imagine_cache.docthumbnail:
        class: Imagine\File\Cache\CacheManager 
        factory: ['@Imagine\\File\\Loader\\FileSystemLoader', "getCacheManager"]
        arguments: 
            - '%kernel.cache_dir%/docthumbnails'
            - 'sonata_docthumbnail'
    imagine.docthumbnail:      
        class: Imagine\Gd\Imagine      
        arguments:   
            - '@imagine_cache.docthumbnail'               
        tags:
             - { name: 'liip_imagine.cache.manager', service: 'imagine_cache.docthumbnail' }
             
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        
    App\Form\MReportType:
        arguments:
            $appointments: '@Doctrine\ORM\EntityManagerInterface'
            
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            # - '../src/DependencyInjection/'
            # - '../src/Entity/'
            # - '../src/Kernel.php'
            
    shared_context:
            class: Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
            
    admin.doctors:
        class: App\Admin\DoctorsAdmin
        arguments:
            - 'admin.doctors' 
            - App\Entity\Doctors
            - Sonata\AdminBundle\Controller\CRUDController
        tags:
            - { name: sonata.admin, model_class: App\Entity\Doctors , label: Doctors, manager_type: orm , group: Doctors , icon: '<i class="fa fa-user-md"></i>'}
            
    admin.user: 
        class: App\Admin\UserAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\User, controller: App\Controller\UserAdminController, manager_type: orm, group: Users, label: Users , icon: '<i class="fa fa-users"></i>'}
            
    admin.appointments: 
        class: App\Admin\AppointmentAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Appointment,  manager_type: orm, group: Appointment , label: Appointments , icon: <i class="fa fa-calendar" aria-hidden="true"></i>}
            
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    admin.m_report:
        class: App\Admin\MReportAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\MReport, controller: ~, manager_type: orm, group: Medical Report, label: Report , icon : <i class="fa fa-clipboard"></i>  }

    admin.contact:
        class: App\Admin\ContactAdmin
        tags:
            - { name: sonata.admin, model_class: App\Entity\Contact, controller: ~, manager_type: orm, group: Contact, label: Contact  , icon : <i class="fa fa-address-book" aria-hidden="true"></i>}
